"""Handles figure plots based on csv files generated by stats.py"""

import os
from itertools import islice, cycle
from typing import List, Tuple, Optional

import matplotlib.pyplot as plt
import numpy as np
import pandas as pd

from directories import figures_dir, stats_dir
from logger import logger


def plot(df,
         figname: str = 'figure',
         xlabel: Optional[str] = None,
         ylabel: Optional[str] = None,
         markers: bool = True,
         drawstyle: str = 'default',
         title: Optional[str] = None,
         linewidths_cycle: Optional[List[float]] = None,
         linestyles_cycle: Optional[List[str]] = None,
         markers_cycle: Optional[List[str]] = None,
         xlim: Optional[Tuple[Optional[int], Optional[int]]] = None,
         ylim: Optional[Tuple[Optional[int], Optional[int]]] = None,
         figsize: Optional[List[int]] = None,
         logx: bool = False,
         logy: bool = False,
         vlines: Optional[List] = None,
         get_figure: bool = False,
         subdirectory: Optional[str] = None,
         legend_loc: str = 'best',
         ):
    """Our plot function"""

    if markers_cycle is None:
        markers_cycle = ['o', 'v', '^', '<', '>']
    if linewidths_cycle is None:
        linewidths_cycle = [1]
    if linestyles_cycle is None:
        linestyles_cycle = ['solid', 'dashed', 'dotted']
    if figsize is None:
        figsize = [8, 6]
    plt.rcParams["figure.figsize"] = figsize
    colormap = plt.cm.get_cmap('Accent')
    colors_cycle = colormap(np.linspace(0, 1, 8))
    colors = list(islice(cycle(colors_cycle), len(df.columns)))
    linewidths = list(islice(cycle(linewidths_cycle), len(df.columns)))
    linestyles = list(islice(cycle(linestyles_cycle), len(df.columns)))
    if not markers:
        markers_cycle = [None]
    markers = list(islice(cycle(markers_cycle), len(df.columns)))

    fig, ax = plt.subplots()
    for col, color, lw, ls, marker in zip(df.columns, colors, linewidths, linestyles, markers):
        df_col = df[col].dropna().sort_index()
        df_col.plot(drawstyle=drawstyle, color=tuple(color), lw=lw, ls=ls, marker=marker, ax=ax,
                    logx=logx, logy=logy)
    if xlim:
        ax.set_xlim(xlim)
    if ylim:
        ax.set_ylim(ylim)
    if title:
        ax.set_title(title)
    ax.grid()
    ax.legend(loc=legend_loc)
    if xlabel:
        ax.set_xlabel(xlabel)
    if ylabel:
        ax.set_ylabel(ylabel)

    if vlines:
        trans = ax.get_xaxis_transform()
        y = .75
        for vline in vlines:
            plt.axvline(x=vline[0], color='red', ls='dashed', lw=.5)
            plt.text(x=vline[0], s=f' {vline[1]}', y=y, transform=trans,
                     rotation=0, verticalalignment='top',
                     size=10, color='red')
            y -= .05

    if subdirectory:
        degree_figures_dir = os.path.join(figures_dir, 'degrees')
        if not os.path.exists(degree_figures_dir):
            os.makedirs(degree_figures_dir)
        fig.savefig(os.path.join(degree_figures_dir, f'{figname}.pdf'))
    else:
        fig.savefig(os.path.join(figures_dir, f'{figname}.pdf'))

    if get_figure:
        return fig

    plt.close(fig)


def csvfiles_to_df(csv_filenames: List, column_names: Optional[List] = None,
                   column_key_increment: int = 0, normalise: bool = False):
    """Return a pandas dataframe as the histogram of the data provided in the csv_filenames"""
    if len(csv_filenames) == 0:
        raise Exception('no csv filenames provided')
    i: int = 0
    df_hist = None
    for csv_filename in csv_filenames:
        df = pd.read_csv(csv_filename, sep=';')
        column_key = df.columns[0]
        df = df.sort_values(column_key)
        df[column_key] = df[column_key] + column_key_increment
        df = df.set_index(column_key)
        if normalise:
            df = df / int(df.sum())  # Normalise
        if i == 0:
            df_hist = df
        else:
            df_hist = pd.merge(df_hist, df, how='outer', on=column_key)
        i += 1
    if not column_names:
        column_names = [os.path.splitext(os.path.basename(filename))[
            0] for filename in csv_filenames]
    df_hist.columns = column_names
    return df_hist
